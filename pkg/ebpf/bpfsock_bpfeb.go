// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type BpfSockEventT struct {
	Saddr    [16]uint8
	Daddr    [16]uint8
	TsUs     uint64
	SpanUs   uint64
	RxBytes  uint64
	TxBytes  uint64
	Pid      uint32
	Sport    uint16
	Dport    uint16
	Family   uint16
	_        [6]byte
	CgroupId uint64
}

type BpfSockIdentT struct {
	Pid      uint32
	CgroupId uint64
}

// LoadBpfSock returns the embedded CollectionSpec for BpfSock.
func LoadBpfSock() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfSockBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load BpfSock: %w", err)
	}

	return spec, err
}

// LoadBpfSockObjects loads BpfSock and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfSockObjects
//	*BpfSockPrograms
//	*BpfSockMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfSockObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpfSock()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSockSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSockSpecs struct {
	BpfSockProgramSpecs
	BpfSockMapSpecs
}

// BpfSockSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSockProgramSpecs struct {
	InetSockSetState *ebpf.ProgramSpec `ebpf:"inet_sock_set_state"`
}

// BpfSockMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSockMapSpecs struct {
	Birth  *ebpf.MapSpec `ebpf:"birth"`
	Events *ebpf.MapSpec `ebpf:"events"`
	Idents *ebpf.MapSpec `ebpf:"idents"`
}

// BpfSockObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfSockObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfSockObjects struct {
	BpfSockPrograms
	BpfSockMaps
}

func (o *BpfSockObjects) Close() error {
	return _BpfSockClose(
		&o.BpfSockPrograms,
		&o.BpfSockMaps,
	)
}

// BpfSockMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfSockObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfSockMaps struct {
	Birth  *ebpf.Map `ebpf:"birth"`
	Events *ebpf.Map `ebpf:"events"`
	Idents *ebpf.Map `ebpf:"idents"`
}

func (m *BpfSockMaps) Close() error {
	return _BpfSockClose(
		m.Birth,
		m.Events,
		m.Idents,
	)
}

// BpfSockPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfSockObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfSockPrograms struct {
	InetSockSetState *ebpf.Program `ebpf:"inet_sock_set_state"`
}

func (p *BpfSockPrograms) Close() error {
	return _BpfSockClose(
		p.InetSockSetState,
	)
}

func _BpfSockClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpfsock_bpfeb.o
var _BpfSockBytes []byte
