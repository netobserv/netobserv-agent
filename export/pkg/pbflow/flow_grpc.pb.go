// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: export/proto/flow.proto

package pbflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	// Sends a greeting
	Send(ctx context.Context, in *Records, opts ...grpc.CallOption) (*CollectorReply, error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) Send(ctx context.Context, in *Records, opts ...grpc.CallOption) (*CollectorReply, error) {
	out := new(CollectorReply)
	err := c.cc.Invoke(ctx, "/pbflow.Collector/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility
type CollectorServer interface {
	// Sends a greeting
	Send(context.Context, *Records) (*CollectorReply, error)
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (UnimplementedCollectorServer) Send(context.Context, *Records) (*CollectorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Records)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbflow.Collector/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Send(ctx, req.(*Records))
	}
	return interceptor(ctx, in, info, handler)
}

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbflow.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Collector_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "export/proto/flow.proto",
}

// StreamedCollectorClient is the client API for StreamedCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamedCollectorClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (StreamedCollector_SendClient, error)
}

type streamedCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamedCollectorClient(cc grpc.ClientConnInterface) StreamedCollectorClient {
	return &streamedCollectorClient{cc}
}

func (c *streamedCollectorClient) Send(ctx context.Context, opts ...grpc.CallOption) (StreamedCollector_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamedCollector_ServiceDesc.Streams[0], "/pbflow.StreamedCollector/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamedCollectorSendClient{stream}
	return x, nil
}

type StreamedCollector_SendClient interface {
	Send(*Record) error
	CloseAndRecv() (*CollectorReply, error)
	grpc.ClientStream
}

type streamedCollectorSendClient struct {
	grpc.ClientStream
}

func (x *streamedCollectorSendClient) Send(m *Record) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamedCollectorSendClient) CloseAndRecv() (*CollectorReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CollectorReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamedCollectorServer is the server API for StreamedCollector service.
// All implementations must embed UnimplementedStreamedCollectorServer
// for forward compatibility
type StreamedCollectorServer interface {
	Send(StreamedCollector_SendServer) error
	mustEmbedUnimplementedStreamedCollectorServer()
}

// UnimplementedStreamedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedStreamedCollectorServer struct {
}

func (UnimplementedStreamedCollectorServer) Send(StreamedCollector_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedStreamedCollectorServer) mustEmbedUnimplementedStreamedCollectorServer() {}

// UnsafeStreamedCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamedCollectorServer will
// result in compilation errors.
type UnsafeStreamedCollectorServer interface {
	mustEmbedUnimplementedStreamedCollectorServer()
}

func RegisterStreamedCollectorServer(s grpc.ServiceRegistrar, srv StreamedCollectorServer) {
	s.RegisterService(&StreamedCollector_ServiceDesc, srv)
}

func _StreamedCollector_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamedCollectorServer).Send(&streamedCollectorSendServer{stream})
}

type StreamedCollector_SendServer interface {
	SendAndClose(*CollectorReply) error
	Recv() (*Record, error)
	grpc.ServerStream
}

type streamedCollectorSendServer struct {
	grpc.ServerStream
}

func (x *streamedCollectorSendServer) SendAndClose(m *CollectorReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamedCollectorSendServer) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamedCollector_ServiceDesc is the grpc.ServiceDesc for StreamedCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamedCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbflow.StreamedCollector",
	HandlerType: (*StreamedCollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _StreamedCollector_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "export/proto/flow.proto",
}
